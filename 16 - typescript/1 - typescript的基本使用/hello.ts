// 编程语言类型
// 1. 动态类型语言：在运行期间才会去做数据类型的检查，只在运行的时候才会去检查错误；js、pathy、ruthy是典型的动态语言；造轮子eslint(静态代码检查器，编码期间开始提示一些规则)
// 2. 静态类型语言：在编译阶段做类型检查，需要声明变量数据类型；C、C++、java是典型的静态语言；

// Typescript究竟是什么？
// 1. Javascript that scales
// 2. 静态类型风格的类型系统
// 3. 从es6到es10甚至是esnext的语法支持
// 4. 兼容各种浏览器，各种系统，各种服务器，完全开源

// 为什么要使用typescript？
// 1. 程序更容易理解
// 问题：函数或者方法输入输出的参数类型，外部条件等
// 动态语言的约束：需要手动调试等过程
// 有了typescript：代码本身就可以回答上诉问题(看懂别人的代码，不用猜测)
// 2. 效果更高
// 在不同的代码块和定义中进行跳转
// 代码自动补全
// 丰富的接口提示
// 3. 更少的错误
// 编译期间能够发现大部分错误
// 杜绝一些比较常见错误
// 4. 非常好的包容性
// 完全兼容javascript
// 第三方库可以单独编写类型文件
// 流行项目都执行typescript - React、Vue、Angualr、Ant design等
// 5. 一点小缺点
// 增加了一些学习成本
// 短期内增加了一些开发成本

// 安装ts环境
// 1. npm install -g typescript  (npm install -g typescript@3.7.2)
// 2. tsc -v  查看安装的ts版本号

const hello = (name: string) => {   // 声明name的类型只能是string 但是编译之后和不声明string类型是一样的 此点就可以说明ts是一个静态检查语言 会在编译的时候去检查
  return `hello ${name}`
}

hello('world')
